[1mdiff --git a/public/src/library/market_feed/market_feed.h b/public/src/library/market_feed/market_feed.h[m
[1mindex 74a0544..c19725d 100644[m
[1m--- a/public/src/library/market_feed/market_feed.h[m
[1m+++ b/public/src/library/market_feed/market_feed.h[m
[36m@@ -55,7 +55,9 @@[m [mnamespace lime::md[m
     {[m
         using protocol = T1;[m
         using sequence_number = lime::md::sequence_number<T1, T2>;[m
[32m+[m
         struct packet_header; // implementation required[m
[32m+[m
     }; // market_feed_traits[m
 [m
 [m
[36m@@ -66,13 +68,18 @@[m [mnamespace lime::md[m
     //=========================================================================[m
     template <typename target_type, market_feed_traits_concept market_feed_traits_type>[m
     class market_feed :[m
[32m+[m[32m        virtual non_copyable,[m
[32m+[m[32m        virtual non_movable,[m
         public message::receiver<target_type, typename market_feed_traits_type::protocol>[m
     {[m
     public:[m
 [m
[32m+[m[32m        template <network::network_mode> friend class market_feed_interface;[m
[32m+[m
         using target = target_type; [m
         using market_feed_traits = market_feed_traits_type;[m
         using protocol = typename market_feed_traits::protocol;[m
[32m+[m[32m        using message_parser = message::receiver<target_type, protocol>;[m
         using packet_header = typename market_feed_traits::packet_header;[m
         using sequence_number = typename market_feed_traits::sequence_number;[m
         using sequence_number_traits = typename sequence_number::traits;[m
[36m@@ -95,22 +102,25 @@[m [mnamespace lime::md[m
             close_handler           closeHandler_;[m
         };[m
 [m
[32m+[m[32m        void close();[m
[32m+[m
[32m+[m[32m        virtual ~market_feed() = default;[m
[32m+[m
[32m+[m[32m    protected:[m
[32m+[m
         market_feed[m
         ([m
             event_handlers[m
         );[m
 [m
[31m-        ~market_feed() = default;[m
[31m-[m
         template <network::network_mode N>[m
[31m-        void connect[m
[32m+[m[32m        bool connect[m
         ([m
             network::virtual_network_interface<N> & virtualNetworkInterface,[m
[31m-            std::function<void(std::span<char const>)> callback,[m
             market_feed_socket::configuration const & config[m
         )[m
         {[m
[31m-            socket_.connect(virtualNetworkInterface, callback, config);[m
[32m+[m[32m            return socket_.connect(virtualNetworkInterface, [this](auto packet){this->process_packet(packet);}, config);[m
         }[m
         [m
         void process_packet[m
[36m@@ -118,8 +128,6 @@[m [mnamespace lime::md[m
             std::span<char const>[m
         );[m
 [m
[31m-        void close();[m
[31m-[m
     private:[m
 [m
         void on_close();[m
[36m@@ -201,6 +209,7 @@[m [mvoid lime::md::market_feed<target_type, market_feed_traits>::process_packet[m
         return; // insufficient data for the packet header[m
     }[m
     auto beg = packetData.data();[m
[32m+[m[32m    auto end = beg + packetData.size();[m
     auto const & packetHeader = *reinterpret_cast<packet_header const *>(beg);[m
     auto sequenceNumber = get_sequence_number(packetHeader);[m
     if (sequenceNumber != currentSequenceNumber_)[m
[36m@@ -210,8 +219,18 @@[m [mvoid lime::md::market_feed<target_type, market_feed_traits>::process_packet[m
         on_sequence_gap(sequenceNumber);[m
         currentSequenceNumber_ = sequenceNumber;[m
     }[m
[31m-    if (auto remaining = this->process(get_message_data(packetHeader)); not remaining.empty())[m
[32m+[m
[32m+[m[32m    auto blockSize = packetHeader.blockSize_.get();[m
[32m+[m[32m    if ((beg + blockSize) != end)[m
[32m+[m[32m    {[m
[32m+[m[32m        on_data_error(packetData);[m
[32m+[m[32m        return; // erroneous data in packet[m
[32m+[m[32m    }[m
[32m+[m[32m    auto messageData = std::span(beg + sizeof(packet_header), blockSize - sizeof(packet_header));[m
[32m+[m[32m    auto remaining = this->message_parser::process(messageData);[m
[32m+[m[32m    if (not remaining.empty())[m
         on_data_error(remaining); // data remaining in packet after parse (alignment bytes perhaps?)[m
[32m+[m
     currentSequenceNumber_ = get_next_sequence_number(currentSequenceNumber_, packetHeader); [m
 }[m
 [m
[1mdiff --git a/public/src/library/market_feed/market_feed_socket.h b/public/src/library/market_feed/market_feed_socket.h[m
[1mindex b35d8bd..b6acb1e 100644[m
[1m--- a/public/src/library/market_feed/market_feed_socket.h[m
[1m+++ b/public/src/library/market_feed/market_feed_socket.h[m
[36m@@ -86,7 +86,7 @@[m [mnamespace lime::md[m
         void close();[m
 [m
         template <network::network_mode N>[m
[31m-        void connect[m
[32m+[m[32m        bool connect[m
         ([m
             network::virtual_network_interface<N> &,[m
             std::function<void(std::span<char const>)>,[m
[1mdiff --git a/public/src/library/market_feed/network/market_feed_interface.h b/public/src/library/market_feed/network/market_feed_interface.h[m
[1mindex b2a73f5..e8dbd0a 100644[m
[1m--- a/public/src/library/market_feed/network/market_feed_interface.h[m
[1m+++ b/public/src/library/market_feed/network/market_feed_interface.h[m
[36m@@ -110,9 +110,6 @@[m [mauto lime::md::market_feed_interface<N>::join_multicast[m
 ) -> std::unique_ptr<recipient>[m
 {[m
     auto marketFeed = std::make_unique<recipient>(std::forward<Ts>(args) ...);[m
[31m-    marketFeed->connect(*virtualNetworkInterface_, [m
[31m-            [marketFeed = marketFeed.get()](auto packetData){marketFeed->process_packet(packetData);},[m
[31m-            {.socketAddress_ = socketAddress, .receiveBufferSize_ = ((1 << 20) * 64)});[m
[31m-[m
[32m+[m[32m    marketFeed->connect(*virtualNetworkInterface_, {.socketAddress_ = socketAddress, .receiveBufferSize_ = ((1 << 20) * 64)});[m
     return marketFeed;[m
 }[m
